Архитектурные стили -- это, как и паттерны проектирования (но не одно и тоже, паттерны менее стратегичны) -- именованный набор решений, которые
-- применимы в выбранном контексте разработки
-- задают ограничения на принимаемые архитектурные решения, специфичные для определенных систем в этом контексте
-- приводят к желаемым результатам

Архитектурный шаблон -- именованный набор ключевых решений по эффективной организаци подсистем, применимых для повторяемых технических
задач проектирования в различных контекстах и предметных областях

Стили -- это скорее, не про "как делать", а про ограничениях.
Шаблон -- это что-то более тактическое, но ещё не паттерн. Например, шаблон может описывать часть приложения, например, взаимодействие с пользователем

Картинка D. Medvidovic/ Application Domain Knowledge

Пример архитектурного шаблона: 
1) трехзвенная архитектура State-Logic-Display (веб, игры, многопользовательские)
Есть клиент, отображающий данные и работающий с пользователем. Далее идет бизнес логика, выполн полезную работу, вычисления. Ниже расположен слой хранения данных.

Предполагается, что юзер-интерфейс состояния не хранит, все необходимое состояние лежит на сервере с БД.
Такая организация позволяет масштабироваться на каждом слое: запросы, логика, репликация.

2) Model-View-Controller (взаимодействие с польз)
--Разделяет данные, представление и взаимодействие с пользователем
--Если в модели что-то меняется, она оповещает представление(я)
--Через контроллер происходит все взаимодействие с пользователем 
Контроллер получает события от пользователя, модель хранит в себе данные и обр бизнес-логику и нотифицирует что-то

ПОльзователь видит данные -- дергает контроллер -- модель меняется -- вью опрашивает изменения в модели и отображает их

Очень часто под MVC в веб это не MVC, а трехзвенная, где дисплей--вью, бизнес-логика -- контроллер, реализующий БЛ и возможно взаимодействует с моделью.
Ещё варианты:
-- QT: Model-View -- контроллер убрали, объединив с вью. Просто, но беда с Undo/Redo.
-- Android studio: Модель, вью, который такой же как в MVC, но между ними еще есть view-model-классы, удобно предствавляющие данные для отображения.
View ничего не знает про код бизнес-логики, он ходит через прокси-интерфейс.

3) Sense-compute-control
Применяется в embedded и робототехнике
Считать данные с сенсоров, посчитать управляющее воздействие, выдать управляющее воздействие на плату.
Цель -- абстрагировать логику квадратика "Компьютер" от внешнего мира, обеспечить доставку данных.
Факт: архитектурный шаблон -- лишь вершина айсберга...
------------------------------------------------------------------------------------------------------------------------------------

Архитектурные стили:
-- Именнованная коллеция архитектурных решений
-- Менее узкоспециализированные, чем архитектурные паттепрны
"Больше предпочтения, чем насущная необходимость, однако, стили могут быть привязанными к конкретному окружению, в котором программа работает.

-- Одна система может включать в себя несколько архитектурных стилей
-- Понятие стиля применимо и к подсистемам

Зачем нужны стили?
Стиль -- набор знаний в легко усвояемой форме.
Есть ТЗ, IDE, нет идеи что делать -- так есть же...

-- Переиспользование архитектуры
	-- Применять хорошо известные и изученные решения
-- Переиспользование кода
	-- У стилей часто бывают неизменные части, которые можно реализовать единожды
		-- Например, в веб фреймворки часто предполагают готовый стиль. (no boilerplate! ^)
		-- А бывают фреймворки, которые вообще берут на себя кучу вспомогательных вещей, но не влияют на готовую архитектуру системы
		Пример: ROS. Сама ничего не делает, но предоставляет интерфейс и IPC для прикладных программистов в виде РОС-узлов (готовых типов, из которых можно собирать решения)
-- Упрощение общения и понимания системы
-- Упрощение интеграции
-- Набор стиль-специфичных методов анализа--возможны благодаря ограничениям на структуру системы
-- Специфичные другие методы, например, визуализации.

Основные хараетеристики стилей:
-- Набор используемых эл=тов архитектуры
	-- Типы компонентов и соединителей, элементы данных (объекты, фильтры, сервера, каналы и тд)
-- Набор правил конфигурирования (стили без ограничений -- практически бесполезны)
	-- Топологические ограничения на соединение элементов (пример: компонент А может быть соединен с максимум двумя компонентами Z).
-- Семантика элементов

Примеры:
1) Сырой ООП-стиль (слабый, почти без ограничений).
Компоненты -- объекты
Соединители -- сообщения и вызовы метовов

То есть взаимодействие -- посылка сообщения через публичный интерфейс (вызов public-метода)
Инварианты:
 -- Объекты отвечают за свое внутреннее состояние
 -- Реализация должна быть скрыта от других объектов -- топологическое ограничение

Преимущества:
 -- Декомпозиция системы в набор взаимодействующих агентов
 -- Внутреннее представление объектов можно менять независимо (и писать вообще). В ЯП Eiffel объекты вообще живут в отдельных потоках.
 -- Близко к предметной области (Думаем о предметной области как о наборе сущностей с характеристиками).
Недостатки:
 -- Побочные эффекты при вызове методов
 -- Объекты вынуждены знать обо всех своих зависимостях (с кем взаимодействуют). В результате, возможно скатывание в клубок "каждый с каждым".


Уточнение, усложнение:


2) Слоистый стиль
Иерархическая организация системы -- "Многоуровневый клиент-сервер"
 -- Каждый слой предоставляет интерфейс для использования слоями выше
 -- Каждый слой работает как:
    -- сервер -- предоставляем функциональность слоям выше
    -- Клиент -- использует функциональность слоев ниже
  -- Соединители -- протоколы взаимодействия слоёв
  -- Пример -- некоторые ОС (простые), сетевые стеки протоколов
Соединители -- протоколы взаимодействия слоев
Поток управления движется сверху вниз по слоям (*это не всегда так).
Преимущества:
             -- Плюс ко всему, если строить по слоям, снизу вверх, ...
             -- Можно гибко изменять систему, варьируя уровни абстракции:
                -- легкость в расширении
		-- любой слой можно взять, заменить на другой, или в принципе не реализовывать (базовые понятия предметной области <- операционный уровень <- польз. интерфейс).
		-- Изменения в каждом уровне затрагивают максимум два соседних
		-- Возможны разные реализации уровня, если они удовлетворяют интерфейсу
Недостатки:
             -- Не всегда применим (вспомним пример с Linux)
	     -- Проблемы с производительностью
             

Варианты: 
 	-- строий слоистый стиль (N знает про N-1)
		-- гарантированно изменение в реализации одного уровня затрагивает только зависимый уровень
		-- но приходится много странного кода писать ----> могут возникнуть проблемы с производительностью
	-- нестрогий (N знает про N-1,..,1)
                  
Частный случай слоистого стиля -- Клиент-сервер
+ ограничение на комноненты и топологию:
-- Компоненты -- клиенты и серверы
Клиенты знают только про сервера и не могут общаться друг с другом.
Сервер не имеет права знать о клиентах, которые к нему ещё не приконнектились, но он может хранить информацию о сессии.
По крайней мере, сервер не должен делать предположений о количестве клиентов вообще.
Пример: сетевые приложения, X Server, вычислительные парпрог.

3) Гексагональная архитектура (Ею можно замостить плоскость :))
"Порты и адаптеры". (Butzin et al. Microservices ...).
Это другая точка зрения на уровни. 
-- Самый нижний -- уровень предметной области (application domain).
-- Все остальное является внешними зависимостями к нему.
-- Активно используется инверсия зависимостей -- Пример с application domain и поддержкой нескольких типов БД.
-- Порт -- это интерфейс, поставляемый или потребляемый
-- Адаптер -- паттерн "Адаптер" для согласования интерфейсов. 
   ---- Адаптер же отвечает за валидацию и верификацию данных.
PrimaryAdapters -- дергают бизнес-логику (1)
SecondaryAdapters -- управляются бизнес-логикой (2)

Топологическое ограничение: поток управления идет от 1 к 2

Преимущества:
-- изоляция механизмов доставки
-- изоляция вспомогательных механизмов
-- легкость тестирования, mock
-- Чистая бизнес-логика и модель предметной области
	-- Максимальная простота
	-- Возможность валидации и конверирования данных

Минусы:
-- Довольно тяжеловесна
-- Не очень подробна
-- Местами избыточна, сложна by design
-- Непонятно, что делать с фреймворками
	-- Пишем программу на django. django -- это внешняя зависимость? Да нет же. Бизнес-логика пишется с использованием фреймворка. Невозможно их полностью разделить, не продублировав
           (завернув) вызовы и объекты фреймворка в свои -- фактически дублируем код!
        -- В то же время, ядро с бизнес-логикой стараются сделать максимально независимым от всего внешнего (вспомним пример с микроядром в ОС).



Соединители -- сетевые протоколы.

4) Луковая архитектура
Нечто переходное -- уточняет уровень бизнес-логики в гексагональной, с ограничением на внутреннюю структуру ядра
Зависимости по компиляции у ядра могут быть только из внешних слоев во внутренние, так что:
 -- Внутренние слои не знают о внешних, модель вообще ни о ком не знает
 -- Внутренние слои определяют интерфейсы, внешние их реализуют
 -- Уровневость нестрогая -- слой может использовать все слои под ним

Доменные сервисы -- 2 -- реализуют сценарии работы с сущностями 1.
Над ними 3 -- конкретные случаи использования в приложениях.

Application core 1-3 -- фактически это фреймворк.
Изначально предполагалось, что БД находится в центре доменной модели, но сообщество разумно стало считать это внешней зависимостью.

5) "Чистая" архитектура -- идея та же , что и у луковой. Но она более детально делит на слои и более внятный поток управления.
Ввводятся сущности presenter и interactor.
Чистая и хорошая модель предметной области -- граница -- внешние штуки
Внутри может быть только верифицированная информация.

Рассмотрим, как распространяется запрос.
View --> Constroller формирует request model (template object, хранящий параметры), скармливает boundary interface запрос, который будет обработан interactor, дергающий внешнее API к <L ()
, чистый мир будет покинут, после чего результат будет возвращен снова в чистый мир какому-то entity, далее от этого entity отдан presenter, снова покинув прекрасный чистый мир 
бизнес-логики, передастся view model, и будет представлен во view.

Плюсы:
-- Хороша:)
Минусы:
-- Очень сложна
-----------------------------------------------------------------------------------------------------------------
Стили, ориентированные на потоки данных:

1) Пакетная обработка
-- Система -- набор отдельных программ, выполняющихся последовательно
-- Данные стандартным IPC (чаще всего pipe) передаются от программы к программе
-- Данные -- в явном виде всё, необходимое для работы.
-- Программы своего состояния не хранят -- процесс запущен, процесс завершен -- все.
Минус -- стартовать новый процесс -- дорого!

2)  Каналы и фильтры
-- Компоненты -- это фильтры, преобразующие данные I->O
-- Соединители -- каналы
Фильтры не знают друг о друге, могут иметь порты для втыкания каналов, и знают только о каналах.
Инварианты: 
-- фильтры не имеют разделяемого состояния
-- Фильтры не знают о фильтрах до или после них

Фильтры, как правило, работают независимо

Варианты:
-- Конвейеры -- линейные последовательности фильтров
-- Ограниченные каналы -- канал это очередь с конечным числом элементов
-- Типизированные каналы -- каналы отличаются по типу передаваемых данных

Преимущества:
-- Поведение системы -- последовательное примение поведений компонентов -- предстакуемость
-- Легко добавлять, заменять, перемспользовать фильтры
   -- любые два фильтра можно использовать вместе (для нетипизированных)
-- Широкие возможности для анализа
	-- Пропускная способность, задержки, deadlocks, достижимость, алгоритмы потоков (данные двигаются) на графах...
-- Широкие возможности для параллелизма
	--

Недостатки:
-- Данные по фильтрам все равно идут последовательно, нужно пройти всю цепочку...
-- система вряд ли будет очень отзывчива...Проблемы с интерактивностью
-- для управления может понадобиться отдельный канал
-- пропускная способность определяется самым узким местом
-- 

3) Доска (blackboard)
Компоненты пишут на доске, которая хранит состояние служит для координации агентов.
-- Два типа компонентов -- центальная структура данных и компоненты, с ней работающие
Инварианты:
-- Управление системой осуществляется только через состояние доски
-- Компоненты не знают друг о друге и не имеют своего состояния
Накидываем решатели, которые работают со структурой данных, и они последовательно решают что-то, пока не сойдутся к ответу.
Применяется в системах переписывающих правил -- некоторые задачи ИИ, графовые грамматики, опт. проходы компилятора, парсеры, etc.
Транслятор -- имеет n-количество проходов, которые переписывают AST. Каждое из них ищет в дереве шаблон и переписывает его.
В реальных компиляторах стоит задача добавления таких переписываний. Стратегия: правила последовательно применяются, пока шаблоны не перестанут матчиться.
И даже обыкновенные грамматики можно представлять как blackboard. (Восходящие или нисходящие?--а не важно).
Алгорифмы Маркова также: набор продукций над строками, и они последовательно применяются ...

----------------------------------------------------------------------------------------------------------------------------------------------------------
4) Событийные стили
Есть события ...
 -- Слушатели могут подписываться на них
 -- Система при наступлении события сама вызывает все зарегистрированные методы слушателей
Два типа соединений
-- явный вызов метода
-- неявный по наступлению события -- на них может быть никто не подписан, и это нормально.
Инварианты:
-- Те, кто производит события, не знают, кто на них реагирует
-- Не делается никаких предположений о том, как событие обработано и будет ли вообще
То есть это как каналы и фильтры, но порядок применения агентов не определен.

Преимущества:
-- низкая связность между компонентами, переиспользование компонентов
-- Легкость в конфигурировании как во время компиляции, так и во время выполнения

Недостатки:
-- Зачастую неинтуитивная структура системы
-- Компоненты не управляют последовательностью вычислений
-- Непонятно, кто отреагирует на запрос и в каком порядке придут ответы
-- Тяжело отлаживаться
-- Гонки в однопоточном приложении -- порядок доставки недетерминирован!

Технически, в подавляющем большинстве -- события доставляются некотором порядке...

5) Publish-subscriber -- поправка ...
Иногда добавляют еще "маршрутизаторы".
-- Подписчики регистрируются, чтобы получать нужные им сообщения или данные. Издатели публикуют сообщения, синхронно или асинхронн.
-- Компоненты -- издатели, подписчики, "маршрутизаторы".
-- Соединители -- сетевые протоколы, IPC, механизмы типа паттерна "наблюдатель"
-- Данные -- подписки, нотификации, публикуемая информация
-- Топология -- подписчики подключаются к издателям напрямую, либо через посредников
Преимущества:
-- низкая связность
-- высокая эффективность распределения информации

6) Событийная шина -- независимые компоненты общаются через шину.
-- Компоненты: независимые генераторы или потребители событий (сообщений)
-- Соединители: шины событий
-- Данные: события и связанные с ними данные, посылаемые по шине
-- Топология: компоненты общаются только с шиной
-- Варианты: push/pull-режимы работы с шиной
-- Event Sourcing -- компоненты могут не иметь собственного состояния, а строить его по пулу сообщений из шины.
Преимущества:
-- легкость масштабирования, добавления новых функций, эффективно для распределенных систем.

Применение -- некоторые ОС, распределенные системы.

7)P2P
-- Состояние и поведение распределены между компонентами , которые могут выступать как клиенты и как серверы
-- Компоненты -- имеют свое состояние и свой поток управления
-- Соединители -- как правило, сетевые протоколы
-- Жлементы данных -- сетевые сообщения
-- Топология: сеть, динамически изменяемая
Преимущества:
-- Хорош в распределенных вычислениях
-- Позволяет решать задачу сообща -- сенсорные сети, стаи БПЛА, и тд.
-- Устойчивость к отказам, и даже поощрается хаос.
-- Легко масштабируется, если протокол взаимодействия позволяет.

18:08 05.01.2023
