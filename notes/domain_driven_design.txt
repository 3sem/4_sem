Domain-driven design (DDD) -- главенствующая нынче методология* проектирования архитектуры приложения.

Она использует предметную область, для которой разрабатывается программа, как основу архитектуры.

-- Строится Модель предметной области, на основе которой и создаются приложения.

-- Модель -- код, зависимости (сторонние пакеты и библиотеки, и др), документация, устное общение и пр.
-- Модель определяет единый язык, на котором общаются разработчики, эксперты, выражая естественным языком понятия, используемые и в программе, и в области. 

DDD отвечает на вопросы "Откуда брать все эти классы, сущности, каким способом улучшать архитектуру системы..."

То есть, девиз следующий: "Давайте не будем писать конкретное приложение, а будем создавать модель предметной области (в коде), а когда она будет достаточно хорошей для реализации конкретного приложения -- реализуем именно его из модели". Фактически, это позволяет не просто удовлетворять требованиям заказчика, а, проанализировав детально предметную область, даже предлагать ему новые и необходимые фичи и свойства, о которых он даже мог не догадываться.

Правила:

-- Детали реализации не участвуют в модели (не обсуждаются с экспертом) **
  ---- Именно для того, чтобы выудить информацию из эксперта по-максимуму
-- Нужно общаться, используя только именами классами и методами
-- Не нужные для текущей задачи сущности предметной области не должны быть в модели
  ---- Они могут возникать и исчезать по ходу дела...
-- Могут быть скрытые сущности, которые следует выделить явно (например, типизация каких-либо обьектов и тд, фабрики, ограничения и т.д.).
  ---- важно объяснить экспертам роль этих сущностей и послушать их мнение
  ---- ограничения могут стать классами, на объекты могут быть навешены типы
-- Диаграммы объектов могут быть полезны.

Единый язык:

-- У программистов и специалистов предметной области может быть свой профжаргон

*Методология проектирования архитектуры -- структурированный набор методов, отвечающий на вопрос КАК создавать архитектуру системы. Какие шаги нужно сделать, чтоб архитектуру создать.
*За исключением ограничений на внешние зависимости (такая-то библиотека, и никак иначе)
По книге "Эрик Эванс. Предметно-ориентированное проектирование".
